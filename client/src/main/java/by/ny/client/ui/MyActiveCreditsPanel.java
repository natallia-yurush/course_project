/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package by.ny.client.ui;

import by.ny.client.ConnectionUtil;
import by.ny.client.CurrentUserUtil;
import by.ny.server.entity.Credit;
import by.ny.server.entity.CreditStatus;
import by.ny.server.entity.UserCredit;
import by.ny.server.entity.command.credit.GetCreditCommand;
import by.ny.server.entity.command.usercredit.DeleteUserCreditCommand;
import by.ny.server.entity.command.usercredit.GetUserCreditByIdCommand;
import by.ny.server.entity.command.usercredit.ListUserCreditCommand;
import by.ny.server.entity.command.usercredit.PayUserCreditCommand;
import by.ny.server.entity.command.usercredit.SaveUserCreditCommand;
import by.ny.server.entity.result.credit.SingleCreditResult;
import by.ny.server.entity.result.usercredit.DeleteUserCreditResult;
import by.ny.server.entity.result.usercredit.ListUserCreditResult;
import by.ny.server.entity.result.usercredit.SingleUserCreditResult;
import by.ny.server.entity.result.usercredit.UpdateUserCreditStatusResult;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Natallia Yurush
 */
public class MyActiveCreditsPanel extends javax.swing.JPanel {
    private Integer userCreditId;
   
    public MyActiveCreditsPanel() {
        initComponents();
        reloadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        activeCreditsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        paymentSpinner = new javax.swing.JSpinner();
        payButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(836, 300));

        activeCreditsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Цель выдачи", "Сумма кредита", "Основной платеж (мес.)", "Процентный платеж (мес.)", "Остаток"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(activeCreditsTable);

        jLabel1.setText("Сумма оплаты:");

        paymentSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 1.0d, null, 0.1d));

        payButton.setText("Оплатить");
        payButton.setEnabled(false);
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(paymentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(payButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(paymentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payButton))
                .addGap(76, 76, 76))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
     public void reloadTableData() {
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUserCreditCommand(CurrentUserUtil.getCurrentUser()));
            
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();
            
            final List<UserCredit> activeUserCredits = new ArrayList();
            
            for (UserCredit userCredit : result.getUserCredits()) {
                if (userCredit.getStatus() == CreditStatus.ACTIVE) {
                    activeUserCredits.add(userCredit);
                }
            }
            
                                   
            activeCreditsTable.setModel(new AbstractTableModel() {
                private String columns[] = new String [] { "Цель выдачи", "Сумма кредита", "Основной платеж (мес.)", "Процентный платеж (мес.)", "Остаток" };
                
                
                @Override
                public int getRowCount() {
                    return activeUserCredits.size();
                }

                @Override
                public int getColumnCount() {
                    return columns.length;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    UserCredit userCredit = activeUserCredits.get(rowIndex);
                    //((SpinnerNumberModel) paymentSpinner.getModel()).setMaximum(userCredit.getIssueAmount());
                    
                    if (columnIndex == 0) {
                        try {
                            Socket socket = ConnectionUtil.getSocket();

                            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                            outputStream.writeObject(new GetCreditCommand(userCredit.getCreditId()));

                            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                            SingleCreditResult result = (SingleCreditResult) inputStream.readObject();
                            Credit credit = result.getCredit();

                            return credit.getPurpose();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (columnIndex == 1) {
                        return userCredit.getIssueAmount();
                    } else if (columnIndex == 2) {
                        return userCredit.getBasicMonthlyPayment();
                    } else if(columnIndex == 3) {
                        return userCredit.getInterestMonthlyPayment();
                    } else if(columnIndex == 4) {
                         try {
                            Socket socket = ConnectionUtil.getSocket();

                            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                            outputStream.writeObject(new GetCreditCommand(userCredit.getCreditId()));

                            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                            SingleCreditResult result = (SingleCreditResult) inputStream.readObject();
                            Credit credit = result.getCredit();

                            return userCredit.getIssueAmount() + (userCredit.getIssueAmount()*credit.getPercent()/1200) - userCredit.getContributed_amount();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }    
                    }
                    return "";
                }
                
                // needed to show column names in JTable
                public String getColumnName(int col) {
                    return columns[col];
                }
                public Class getColumnClass(int col) {
                    if (col == 0) {
                        return String.class;
                    }
                    else {
                        return Double.class;
                    }
                }
            });
            
            activeCreditsTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    int selectedRow = activeCreditsTable.getSelectedRow();

                    if (selectedRow < 0) {
                        return;
                    }

                    userCreditId = activeUserCredits.get(selectedRow).getId();
                    payButton.setEnabled(true);
                    //((SpinnerNumberModel) paymentSpinner.getModel()).setMaximum(100000);
                    //((SpinnerNumberModel) paymentSpinner.getModel()).setMaximum(userCredit.getIssueAmount());
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }            
    
    
    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        if (userCreditId == null) {
            payButton.setEnabled(false);
            return;
        }
        
        try {
                      
            Socket socket = ConnectionUtil.getSocket();
                        
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new GetUserCreditByIdCommand(userCreditId));
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            SingleUserCreditResult singleUserCreditResult = (SingleUserCreditResult) inputStream.readObject();
            UserCredit userCredit = singleUserCreditResult.getUser();
            
           // paymentSpinner.enableInputMethods(true);
           // ((SpinnerNumberModel) paymentSpinner.getModel()).setMaximum(userCredit.getInterestMonthlyPayment() + userCredit.getBasicMonthlyPayment());
            
            //CurrentUserUtil.getCurrentUser()
            socket = ConnectionUtil.getSocket();
            
            outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new PayUserCreditCommand(userCredit, (Double) paymentSpinner.getValue()));
            
            inputStream = new ObjectInputStream(socket.getInputStream());
            UpdateUserCreditStatusResult result = (UpdateUserCreditStatusResult) inputStream.readObject();
            
            if (result.isSuccess()) {
                payButton.setEnabled(false);
                reloadTableData();
                JOptionPane.showMessageDialog(this, "Оплата успешно произведена.");
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось произвести оплату.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_payButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activeCreditsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton payButton;
    private javax.swing.JSpinner paymentSpinner;
    // End of variables declaration//GEN-END:variables
}
