/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package by.ny.client.ui;

import by.ny.client.ConnectionUtil;
import by.ny.server.entity.User;
import by.ny.server.entity.UserRole;
import by.ny.server.entity.command.user.DeleteUserCommand;
import by.ny.server.entity.command.user.GetUserByIdCommand;
import by.ny.server.entity.command.user.ListUsersCommand;
import by.ny.server.entity.command.user.SaveUserCommand;
import by.ny.server.entity.result.user.GetSingleUserResult;
import by.ny.server.entity.result.user.ListUsersResult;
import by.ny.server.entity.result.user.UpdateUserStatusResult;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Natallia Yurush
 */
public class UsersPanel extends javax.swing.JPanel {

    /**
     * Creates new form UsersPanel
     */
    public UsersPanel() {
        initComponents();
        reloadUsersTableData();
        usersTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    int selectedRow = usersTable.getSelectedRow();

                    if (selectedRow < 0) {
                        return;
                    }

                    Integer userId = (Integer) usersTable.getValueAt(selectedRow, 0);

                    try {
                        Socket socket = ConnectionUtil.getSocket();

                        ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                        outputStream.writeObject(new GetUserByIdCommand(userId));

                        ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                        GetSingleUserResult result = (GetSingleUserResult) inputStream.readObject();
                        User user = result.getUser();

                        idField.setText(String.valueOf(user.getId()));
                        firstNameField.setText(user.getFirstName());
                        lastNameField.setText(user.getLastName());
                        middleNameField.setText(user.getMiddleName());
                        passportNumberField.setText(user.getPassportNumber());
                        passwordField.setText(user.getPassword());

                        switch(user.getRole()) {
                            case ADMIN:
                            roleField.setSelectedIndex(0);
                            break;
                            case CLIENT:
                            roleField.setSelectedIndex(1);
                            break;
                        }

                        roleField.setEnabled(false);
                        deleteButton.setEnabled(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        middleNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        passportNumberField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        roleField = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        deleteButton = new javax.swing.JButton();

        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Идентификатор", "Фамилия", "Имя", "Отчество", "Номер паспорта", "Роль"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(usersTable);

        jLabel1.setText("Идентификатор:");

        idField.setEnabled(false);

        jLabel2.setText("Имя:");

        jLabel3.setText("Фамилия:");

        jLabel4.setText("Отчество:");

        passportNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passportNumberFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Номер паспорта:");

        jLabel6.setText("Пароль:");

        roleField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Администратор", "Клиент" }));
        roleField.setSelectedIndex(1);

        jLabel7.setText("Роль:");

        saveButton.setText("Сохранить");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Очистить");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Удалить");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(55, 55, 55)
                                .addComponent(middleNameField))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(87, 87, 87)
                                        .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(passportNumberField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(roleField, javax.swing.GroupLayout.Alignment.TRAILING, 0, 260, Short.MAX_VALUE)
                                    .addComponent(passwordField)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passportNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(roleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(middleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(saveButton)
                            .addComponent(clearButton)
                            .addComponent(deleteButton)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 854, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 2, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 2, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        try {
            Socket socket = ConnectionUtil.getSocket();

            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            Integer id = "".equals(idField.getText()) ? null : Integer.valueOf(idField.getText());
            UserRole role = UserRole.CLIENT;

            switch (roleField.getSelectedIndex()) {
                case 1:
                role = UserRole.CLIENT;
                break;
                case 2:
                role = UserRole.ADMIN;
                break;
            }

            outputStream.writeObject(new SaveUserCommand(new User(id, firstNameField.getText(), lastNameField.getText(),
                middleNameField.getText(), passportNumberField.getText(), role, String.valueOf(passwordField.getPassword()))));

            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            UpdateUserStatusResult result = (UpdateUserStatusResult) inputStream.readObject();

            if (result.isSuccess()) {

                clearUserFields();
                reloadUsersTableData();
                JOptionPane.showMessageDialog(this, "Пользователь успешно сохранен.");
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось сохранить пользователя.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        clearUserFields();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        Integer userId = Integer.valueOf(idField.getText());

        try {
            Socket socket = ConnectionUtil.getSocket();

            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new DeleteUserCommand(userId));

            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            UpdateUserStatusResult result = (UpdateUserStatusResult) inputStream.readObject();

            if (result.isSuccess()) {

                clearUserFields();
                reloadUsersTableData();
                JOptionPane.showMessageDialog(this, "Пользователь успешно удален.");
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось удалить пользователя.");
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void passportNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passportNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passportNumberFieldActionPerformed

    private void clearUserFields() {
        idField.setText("");
        firstNameField.setText("");
        lastNameField.setText("");
        middleNameField.setText("");
        passportNumberField.setText("");
        passwordField.setText("");
        roleField.setSelectedIndex(1);
        roleField.setEnabled(true);
        
        try {
            usersTable.clearSelection();
        } catch (Exception e) {
            
        }
        deleteButton.setEnabled(false);
    }
    
    private void reloadUsersTableData() {
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult result = (ListUsersResult) inputStream.readObject();
            
            int rowsCount = ((DefaultTableModel) usersTable.getModel()).getRowCount();
            
            for (int i = 0; i < rowsCount; i ++) {
                ((DefaultTableModel) usersTable.getModel()).removeRow(0);
            }
            
            for (int i = 0; i < result.getUsers().size(); i ++) {
                User user = result.getUsers().get(i);
                Object[] row = new Object[6];
                
                row[0] = user.getId();
                row[2] = user.getFirstName();
                row[1] = user.getLastName();
                row[3] = user.getMiddleName();
                row[4] = user.getPassportNumber();
                
                String role = "";
                switch (user.getRole()) {
                    case ADMIN:
                        role = "Администратор";
                        break;
                    case CLIENT:
                        role = "Клиент";
                        break;
                }
                row[5] = role;
                
                ((DefaultTableModel) usersTable.getModel()).addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField middleNameField;
    private javax.swing.JTextField passportNumberField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JComboBox<String> roleField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
