/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package by.ny.client.ui;

import by.ny.client.ConnectionUtil;
import by.ny.client.CurrentUserUtil;
import by.ny.server.entity.Credit;
import by.ny.server.entity.CreditStatus;
import by.ny.server.entity.User;
import by.ny.server.entity.UserRole;
import by.ny.server.entity.UserCredit;
import by.ny.server.entity.command.credit.GetCreditCommand;
import by.ny.server.entity.command.user.ListUsersCommand;
import by.ny.server.entity.command.usercredit.DeleteUserCreditCommand;
import by.ny.server.entity.command.usercredit.ListUserCreditCommand;
import by.ny.server.entity.result.credit.SingleCreditResult;
import by.ny.server.entity.result.user.GetSingleUserResult;
import by.ny.server.entity.result.user.ListUsersResult;
import by.ny.server.entity.command.user.GetUserByIdCommand;
import by.ny.server.entity.command.usercredit.GetUserCreditByIdCommand;
import by.ny.server.entity.command.usercredit.SaveUserCreditCommand;
import by.ny.server.entity.result.usercredit.DeleteUserCreditResult;
import by.ny.server.entity.result.usercredit.ListUserCreditResult;
import by.ny.server.entity.result.usercredit.RequestUserCreditResult;
import by.ny.server.entity.result.usercredit.SingleUserCreditResult;
import by.ny.server.entity.result.usercredit.UpdateUserCreditStatusResult;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Natallia Yurush
 */
public class RequestedCreditsPanel extends javax.swing.JPanel {
    private Integer userCreditId;
    /**
     * Creates new form RequestedCreditsPanel
     */
    public RequestedCreditsPanel() {
        initComponents();
        reloadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestedCreditsTable = new javax.swing.JTable();
        confirmRequestedCreditButton = new javax.swing.JButton();
        rejectRequestedCreditButton = new javax.swing.JButton();

        requestedCreditsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ФИО", "Цель выдачи кредита", "Сумма кредита", "Дата заявки"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestedCreditsTable);

        confirmRequestedCreditButton.setText("Подтвердить заявку");
        confirmRequestedCreditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmRequestedCreditButtonActionPerformed(evt);
            }
        });

        rejectRequestedCreditButton.setText("Отклонить заявку");
        rejectRequestedCreditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectRequestedCreditButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rejectRequestedCreditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(confirmRequestedCreditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmRequestedCreditButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rejectRequestedCreditButton)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 865, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rejectRequestedCreditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectRequestedCreditButtonActionPerformed
         if (userCreditId == null) {
            confirmRequestedCreditButton.setEnabled(false);
            rejectRequestedCreditButton.setEnabled(false);
            return;
        }
         
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new DeleteUserCreditCommand(userCreditId));
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            DeleteUserCreditResult result = (DeleteUserCreditResult) inputStream.readObject();
            
            if (result.isSuccess()) {
                rejectRequestedCreditButton.setEnabled(false);
                reloadTableData();
                JOptionPane.showMessageDialog(this, "Заявка успешно отклонена.");
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось отклонить заявку.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rejectRequestedCreditButtonActionPerformed

    private void confirmRequestedCreditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmRequestedCreditButtonActionPerformed
            if (userCreditId == null) {
                confirmRequestedCreditButton.setEnabled(false);
                rejectRequestedCreditButton.setEnabled(false);
                return;
            }
        
        try {
            Socket socket = ConnectionUtil.getSocket();
                        
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new GetUserCreditByIdCommand(userCreditId));
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            SingleUserCreditResult singleUserCreditResult = (SingleUserCreditResult) inputStream.readObject();
            UserCredit userCredit = singleUserCreditResult.getUser();
            
            //CurrentUserUtil.getCurrentUser()
            socket = ConnectionUtil.getSocket();
            
            outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new SaveUserCreditCommand(userCredit));
            
            inputStream = new ObjectInputStream(socket.getInputStream());
            UpdateUserCreditStatusResult result = (UpdateUserCreditStatusResult) inputStream.readObject();
            
            
            if (result.isSuccess()) {
                reloadTableData();
                JOptionPane.showMessageDialog(this, "Подтверждение заявки прошло успешно.");
            } else {
                JOptionPane.showMessageDialog(this, "Не удалось подтвердить заявку.");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_confirmRequestedCreditButtonActionPerformed

    public void reloadTableData() {
        try {
            
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            outputStream.flush();
            
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            //inputStream.close();
            //outputStream.close();
            
            final List<UserCredit> requestedUserCredits = new ArrayList();
            
            
            for(User user : userListResult.getUsers()){
            
                if( user.getRole() == UserRole.ADMIN){
                    continue;
                }
                socket = ConnectionUtil.getSocket();
                
                outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUserCreditCommand(user));
               
                inputStream = new ObjectInputStream(socket.getInputStream());
                ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                outputStream.flush();
                
                for (UserCredit userCredit : result.getUserCredits()) {
                    if (userCredit.getStatus() == CreditStatus.REQUESTED) {
                        requestedUserCredits.add(userCredit);
                    }
                } 
            }   
            socket.close();
            
            requestedCreditsTable.setModel(new AbstractTableModel() {
                private String columns[] = new String [] { "ФИО", "Цели выдачи кредита", "Сумма кредита", "Дата заявки" };
                
                @Override
                public int getRowCount() {
                    return requestedUserCredits.size();
                }

                @Override
                public int getColumnCount() {
                    return columns.length;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    UserCredit userCredit = requestedUserCredits.get(rowIndex);
                    
                    if (columnIndex == 0) {
                        try {
                            Socket socket = ConnectionUtil.getSocket();

                            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                            outputStream.writeObject(new GetUserByIdCommand(userCredit.getUserId()));

                            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                            GetSingleUserResult result = (GetSingleUserResult) inputStream.readObject();
                            User user = result.getUser();
                            
                            socket.close();
                            
                            String string = user.getLastName() + " " + user.getFirstName() + " " + user.getMiddleName();
                                                 
                            return string;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if(columnIndex == 1) {
                        try {
                            Socket socket = ConnectionUtil.getSocket();

                            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                            outputStream.writeObject(new GetCreditCommand(userCredit.getCreditId()));
                            
                            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                            SingleCreditResult result = (SingleCreditResult) inputStream.readObject();
                            Credit credit = result.getCredit();

                            socket.close();
                            
                            return credit.getPurpose(); 
                            
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (columnIndex == 2) {
                        return userCredit.getIssueAmount();
                    } else if (columnIndex == 3) {
                        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");                        
                        return format.format(userCredit.getIssueDate());
                    }
                    return "";
                }
             
                
                // needed to show column names in JTable
                public String getColumnName(int col) {
                    return columns[col];
                }
                public Class getColumnClass(int col) {
                    if (col == 2) {
                        return Double.class;
                    }
                    else {
                        return String.class;
                    }
                }
            });
          
            requestedCreditsTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    int selectedRow = requestedCreditsTable.getSelectedRow();

                    if (selectedRow < 0) {
                        return;
                    }

                    userCreditId = requestedUserCredits.get(selectedRow).getId();
                    
                    rejectRequestedCreditButton.setEnabled(true);
                    confirmRequestedCreditButton.setEnabled(true);
                }
            });
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
     

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmRequestedCreditButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton rejectRequestedCreditButton;
    private javax.swing.JTable requestedCreditsTable;
    // End of variables declaration//GEN-END:variables
}
