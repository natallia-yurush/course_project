/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package by.ny.client.ui;

import by.ny.client.ConnectionUtil;
import by.ny.client.CurrentUserUtil;
import by.ny.server.entity.Credit;
import by.ny.server.entity.CreditStatus;
import by.ny.server.entity.UserCredit;
import by.ny.server.entity.command.credit.GetCreditCommand;
import by.ny.server.entity.command.usercredit.ListUserCreditCommand;
import by.ny.server.entity.result.credit.SingleCreditResult;
import by.ny.server.entity.result.usercredit.ListUserCreditResult;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Natallia Yurush
 */
public class MyFinishedCreditsPanel extends javax.swing.JPanel {
    private Integer userCreditId;
    
    
    public MyFinishedCreditsPanel() {
        initComponents();
        reloadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        activeCreditsTable = new javax.swing.JTable();

        activeCreditsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Цель выдачи", "Cумма кредита", "Статус кредита"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(activeCreditsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public void reloadTableData() {
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUserCreditCommand(CurrentUserUtil.getCurrentUser()));
            
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();
            
            final List<UserCredit> requestedUserCredits = new ArrayList();
            
            for (UserCredit userCredit : result.getUserCredits()) {
                if (userCredit.getStatus() == CreditStatus.CLOSED) {
                    requestedUserCredits.add(userCredit);
                }
            }
            
            activeCreditsTable.setModel(new AbstractTableModel() {
                private String columns[] = new String [] { "Цель выдачи", "сумма кредита", "Статус кредита" };
                
                @Override
                public int getRowCount() {
                    return requestedUserCredits.size();
                }

                @Override
                public int getColumnCount() {
                    return columns.length;
                }

                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    UserCredit userCredit = requestedUserCredits.get(rowIndex);
                    
                    if (columnIndex == 0) {
                        try {
                            Socket socket = ConnectionUtil.getSocket();

                            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                            outputStream.writeObject(new GetCreditCommand(userCredit.getCreditId()));

                            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                            SingleCreditResult result = (SingleCreditResult) inputStream.readObject();
                            Credit credit = result.getCredit();

                            return credit.getPurpose();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (columnIndex == 1) {
                        return userCredit.getIssueAmount();
                    } else if (columnIndex == 2) {
                        if(userCredit.getStatus() == CreditStatus.CLOSED)
                            return "погашен";
                        else if(userCredit.getStatus() == CreditStatus.ACTIVE)
                            return "активен";
                    }
                    return "";
                }
                
                // needed to show column names in JTable
                public String getColumnName(int col) {
                    return columns[col];
                }
                public Class getColumnClass(int col) {
                    if (col == 1) {
                        return Double.class;
                    }
                    else {
                        return String.class;
                    }
                }
            });
            
            activeCreditsTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    int selectedRow = activeCreditsTable.getSelectedRow();

                    if (selectedRow < 0) {
                        return;
                    }

                    userCreditId = requestedUserCredits.get(selectedRow).getId();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activeCreditsTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
