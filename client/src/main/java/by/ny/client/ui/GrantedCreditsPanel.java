/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package by.ny.client.ui;

import by.ny.client.ConnectionUtil;
import by.ny.server.entity.Credit;
import by.ny.server.entity.CreditStatus;
import by.ny.server.entity.User;
import by.ny.server.entity.UserCredit;
import by.ny.server.entity.UserCreditByAmountComparator;
import by.ny.server.entity.UserCreditByDateComparator;
import by.ny.server.entity.UserNameComparator;
import by.ny.server.entity.UserRole;
import by.ny.server.entity.command.credit.GetCreditCommand;
import by.ny.server.entity.command.user.GetUserByIdCommand;
import by.ny.server.entity.command.user.ListUsersCommand;
import by.ny.server.entity.command.usercredit.ListUserCreditCommand;
import by.ny.server.entity.result.credit.SingleCreditResult;
import by.ny.server.entity.result.user.GetSingleUserResult;
import by.ny.server.entity.result.user.ListUsersResult;
import by.ny.server.entity.result.usercredit.ListUserCreditResult;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Natallia Yurush
 */
public class GrantedCreditsPanel extends javax.swing.JPanel {

    /**
     * Creates new form GrantedCreditsPanel
     */
    public GrantedCreditsPanel() {
        initComponents();
        final List<UserCredit> foundUserCredits = new ArrayList();
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
            //final 
           // List<UserCredit> foundUserCredits = new ArrayList();
            
            for(User user : userListResult.getUsers()){
            
                if( user.getRole() == UserRole.ADMIN){
                    continue;
                }
                socket = ConnectionUtil.getSocket();
                
                outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUserCreditCommand(user));
               
                inputStream = new ObjectInputStream(socket.getInputStream());
                ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                outputStream.flush();
                
                for (UserCredit userCredit : result.getUserCredits()) {
                    if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                    }
                } 
            }   
            socket.close();
            
            //reloadTable(foundUserCredits);
        } catch (Exception e) {
            e.printStackTrace();
        }
        reloadTable(foundUserCredits);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        NumberPassportField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        grantedCreditsTable = new javax.swing.JTable();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        SortByNameButton = new javax.swing.JButton();
        SortByDateButton = new javax.swing.JButton();
        SortByAmountButton = new javax.swing.JButton();

        jLabel2.setText("Фамилия:");

        jLabel3.setText("Номер паспорта:");

        lastNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameFieldActionPerformed(evt);
            }
        });

        NumberPassportField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberPassportFieldActionPerformed(evt);
            }
        });

        grantedCreditsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ФИО", "Номер паспорта", "Сумма кредита", "Дата выдачи", "Дата погашения", "Статус"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grantedCreditsTable.setEnabled(false);
        jScrollPane1.setViewportView(grantedCreditsTable);

        searchButton.setText("Поиск");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Сброс");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        SortByNameButton.setText("Сортировка по ФИО");
        SortByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByNameButtonActionPerformed(evt);
            }
        });

        SortByDateButton.setText("Сортировка по дате погашения");
        SortByDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByDateButtonActionPerformed(evt);
            }
        });

        SortByAmountButton.setText("Сортировка по сумме");
        SortByAmountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByAmountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NumberPassportField, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SortByNameButton)
                        .addGap(18, 18, 18)
                        .addComponent(SortByAmountButton)
                        .addGap(18, 18, 18)
                        .addComponent(SortByDateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NumberPassportField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(SortByNameButton)
                    .addComponent(SortByDateButton)
                    .addComponent(SortByAmountButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void lastNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if(lastNameField.getText().equals("") && NumberPassportField.getText().equals("")){
            try {
                Socket socket = ConnectionUtil.getSocket();
            
                ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUsersCommand());
                outputStream.flush();
            
                ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
                //final
                List<UserCredit> foundUserCredits = new ArrayList();
            
                for(User user : userListResult.getUsers()){
            
                    if( user.getRole() == UserRole.ADMIN){
                        continue;
                    }
                    socket = ConnectionUtil.getSocket();
                
                    outputStream = new ObjectOutputStream(socket.getOutputStream());
                    outputStream.writeObject(new ListUserCreditCommand(user));
               
                    inputStream = new ObjectInputStream(socket.getInputStream());
                    ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                    outputStream.flush();
                
                    for (UserCredit userCredit : result.getUserCredits()) {
                        if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                            foundUserCredits.add(userCredit);
                        }
                    } 
                }   
                socket.close();
            
                reloadTable(foundUserCredits);
            } catch (Exception e) {
                e.printStackTrace();
            } 
        } else if (!lastNameField.getText().equals("")) {
            try{
                Socket socket = ConnectionUtil.getSocket();
            
                ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUsersCommand());
                outputStream.flush();
            
                ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
                //
                final List<UserCredit> foundUserCredits = new ArrayList();
            
                for(User user : userListResult.getUsers()){
                    if(!user.getLastName().contains(lastNameField.getText())) {
                        continue;
                    }
                    
                    socket = ConnectionUtil.getSocket();
                
                    outputStream = new ObjectOutputStream(socket.getOutputStream());
                    outputStream.writeObject(new ListUserCreditCommand(user));
               
                    inputStream = new ObjectInputStream(socket.getInputStream());
                    ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                    outputStream.flush();
                
                    for (UserCredit userCredit : result.getUserCredits()) {
                       if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                       }
                    } 
                }   
                socket.close();
                
                reloadTable(foundUserCredits);
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if(!NumberPassportField.getText().equals("")){
            try{
                Socket socket = ConnectionUtil.getSocket();
            
                ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUsersCommand());
                outputStream.flush();
            
                ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
                final List<UserCredit> foundUserCredits = new ArrayList();
            
                for(User user : userListResult.getUsers()){
                    if(!user.getPassportNumber().contains(NumberPassportField.getText())) {
                        continue;
                    }
                    
                    socket = ConnectionUtil.getSocket();
                
                    outputStream = new ObjectOutputStream(socket.getOutputStream());
                    outputStream.writeObject(new ListUserCreditCommand(user));
               
                    inputStream = new ObjectInputStream(socket.getInputStream());
                    ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                    outputStream.flush();
                
                    for (UserCredit userCredit : result.getUserCredits()) {
                       if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                       }
                    } 
                }   
                socket.close();
                
                reloadTable(foundUserCredits);
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try{
                Socket socket = ConnectionUtil.getSocket();
            
                ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUsersCommand());
                outputStream.flush();
            
                ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
                final List<UserCredit> foundUserCredits = new ArrayList();
            
                for(User user : userListResult.getUsers()){
                    if(!(user.getPassportNumber().contains(NumberPassportField.getText()) && user.getLastName().contains(lastNameField.getText()))) {
                        continue;
                    }
                    
                    socket = ConnectionUtil.getSocket();
                
                    outputStream = new ObjectOutputStream(socket.getOutputStream());
                    outputStream.writeObject(new ListUserCreditCommand(user));
               
                    inputStream = new ObjectInputStream(socket.getInputStream());
                    ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                    outputStream.flush();
                
                    for (UserCredit userCredit : result.getUserCredits()) {
                       if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                       }
                    } 
                }   
                socket.close();
                
                reloadTable(foundUserCredits);
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void clearSearchFields() {
        lastNameField.setText("");
        NumberPassportField.setText("");
        //resetButton.setEnabled(false);
    }
    
    private void NumberPassportFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumberPassportFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumberPassportFieldActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        clearSearchFields();
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
            final List<UserCredit> foundUserCredits = new ArrayList();
            
            for(User user : userListResult.getUsers()){
            
                if( user.getRole() == UserRole.ADMIN){
                    continue;
                }
                socket = ConnectionUtil.getSocket();
                
                outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUserCreditCommand(user));
               
                inputStream = new ObjectInputStream(socket.getInputStream());
                ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                outputStream.flush();
                
                for (UserCredit userCredit : result.getUserCredits()) {
                    if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                    }
                } 
            }   
            socket.close();
            
            reloadTable(Collections.unmodifiableList(foundUserCredits));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void SortByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByNameButtonActionPerformed
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
            //UserNameComparator comparator = new UserNameComparator ();
            Collections.sort(userListResult.getUsers(), new UserNameComparator ());
            //userListResult.sort(comparator);
            
            final List<UserCredit> foundUserCredits = new ArrayList();
            
            for(User user : userListResult.getUsers()){
            
                if( user.getRole() == UserRole.ADMIN){
                    continue;
                }
                socket = ConnectionUtil.getSocket();
                
                outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUserCreditCommand(user));
               
                inputStream = new ObjectInputStream(socket.getInputStream());
                ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                outputStream.flush();
                
                for (UserCredit userCredit : result.getUserCredits()) {
                    if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                    }
                } 
            }   
            socket.close();
            reloadTable(foundUserCredits);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SortByNameButtonActionPerformed

    private void SortByDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByDateButtonActionPerformed
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
            final List<UserCredit> foundUserCredits = new ArrayList();
            
            for(User user : userListResult.getUsers()){
            
                if( user.getRole() == UserRole.ADMIN){
                    continue;
                }
                socket = ConnectionUtil.getSocket();
                
                outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUserCreditCommand(user));
               
                inputStream = new ObjectInputStream(socket.getInputStream());
                ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                outputStream.flush();
                
                for (UserCredit userCredit : result.getUserCredits()) {
                    if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                    }
                } 
            }   
            socket.close();
            
            Collections.sort(foundUserCredits, new UserCreditByDateComparator ());
            
            reloadTable(foundUserCredits);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SortByDateButtonActionPerformed

    private void SortByAmountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByAmountButtonActionPerformed
         try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListUsersCommand());
            outputStream.flush();
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            ListUsersResult userListResult = (ListUsersResult) inputStream.readObject();
            
            final List<UserCredit> foundUserCredits = new ArrayList();
            
            for(User user : userListResult.getUsers()){
            
                if( user.getRole() == UserRole.ADMIN){
                    continue;
                }
                socket = ConnectionUtil.getSocket();
                
                outputStream = new ObjectOutputStream(socket.getOutputStream());
                outputStream.writeObject(new ListUserCreditCommand(user));
               
                inputStream = new ObjectInputStream(socket.getInputStream());
                ListUserCreditResult result = (ListUserCreditResult) inputStream.readObject();    
            
                outputStream.flush();
                
                for (UserCredit userCredit : result.getUserCredits()) {
                    if (userCredit.getStatus() != CreditStatus.REQUESTED) {
                        foundUserCredits.add(userCredit);
                    }
                } 
            }   
            socket.close();
            
            Collections.sort(foundUserCredits, new UserCreditByAmountComparator ());
            
            reloadTable(foundUserCredits);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SortByAmountButtonActionPerformed

    
    public void reloadTable(List<UserCredit> userCreditList) {
        
            grantedCreditsTable.setModel(new AbstractTableModel() {
            private String columns[] = new String [] { "ФИО", "Номер паспорта", "Сумма кредита", "Дата выдачи", "Дата погашения", "Статус" };
                
            @Override
            public int getRowCount() {
                return userCreditList.size();
            }

            @Override
                public int getColumnCount() {
                    return columns.length;
                }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                UserCredit userCredit = userCreditList.get(rowIndex);
                    
                if (columnIndex == 0) {
                    try {
                        Socket socket = ConnectionUtil.getSocket();

                        ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                        outputStream.writeObject(new GetUserByIdCommand(userCredit.getUserId()));

                        ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                        GetSingleUserResult result = (GetSingleUserResult) inputStream.readObject();
                        User user = result.getUser();
                            
                        socket.close();
                            
                        String string = user.getLastName() + " " + user.getFirstName() + " " + user.getMiddleName();
                                                 
                        return string;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if(columnIndex == 1) {
                    try {
                        Socket socket = ConnectionUtil.getSocket();

                        ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                        outputStream.writeObject(new GetUserByIdCommand(userCredit.getUserId()));

                        ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                        GetSingleUserResult result = (GetSingleUserResult) inputStream.readObject();
                        User user = result.getUser();
                            
                        socket.close();
                        
                        return user.getPassportNumber();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (columnIndex == 2) {
                    return userCredit.getIssueAmount();
                } else if (columnIndex == 3) {
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    return format.format(userCredit.getIssueDate());
                } else if (columnIndex == 4) {
                    try {
                            Socket socket = ConnectionUtil.getSocket();

                            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                            outputStream.writeObject(new GetCreditCommand(userCredit.getCreditId()));
                            
                            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                            SingleCreditResult result = (SingleCreditResult) inputStream.readObject();
                            Credit credit = result.getCredit();

                            socket.close();
                            
                            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                            
                            Date date =  new Date(userCredit.getIssueDate().getTime());
                            //date = userCredit.getIssueDate();
                            //int month = userCredit.getIssueDate().getMonth();
                            date.setMonth(userCredit.getIssueDate().getMonth() + credit.getMaxTerm());
                            
                            return format.format(date);    
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                } else if (columnIndex == 5) {
                    if(userCredit.getStatus() == CreditStatus.CLOSED)
                        return "погашен";
                    else if(userCredit.getStatus() == CreditStatus.ACTIVE)
                        return "активный";
                    else if(userCredit.getStatus() == CreditStatus.REQUESTED)
                        return "запрошенный";
                }
                return "";
            }
                  
            // needed to show column names in JTable
            public String getColumnName(int col) {
                return columns[col];
            }
            public Class getColumnClass(int col) {
                if (col == 2) {
                    return Double.class;
                }
                else {
                    return String.class;
                }
            }
        });    
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NumberPassportField;
    private javax.swing.JButton SortByAmountButton;
    private javax.swing.JButton SortByDateButton;
    private javax.swing.JButton SortByNameButton;
    private javax.swing.JTable grantedCreditsTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
