/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package by.ny.client.ui;

import by.ny.client.ConnectionUtil;
import by.ny.server.entity.Credit;
import by.ny.server.entity.User;
import by.ny.server.entity.command.credit.DeleteCreditCommand;
import by.ny.server.entity.command.credit.GetCreditCommand;
import by.ny.server.entity.command.credit.ListCreditsCommand;
import by.ny.server.entity.command.credit.SaveCreditCommand;
import by.ny.server.entity.command.user.ListUsersCommand;
import by.ny.server.entity.result.credit.CreditsResult;
import by.ny.server.entity.result.credit.SingleCreditResult;
import by.ny.server.entity.result.credit.UpdateCreditStatusResult;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Natallia Yurush
 */
public class CreditsPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreditsPanel
     */
    public CreditsPanel() {
        initComponents();
        reloadCreditsTableData();
        creditsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    int selectedRow = creditsTable.getSelectedRow();

                    if (selectedRow < 0) {
                        return;
                    }

                    Integer creditId = (Integer) creditsTable.getValueAt(selectedRow, 0);

                    try {
                        Socket socket = ConnectionUtil.getSocket();

                        ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
                        outputStream.writeObject(new GetCreditCommand(creditId));

                        ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
                        SingleCreditResult result = (SingleCreditResult) inputStream.readObject();
                        Credit credit = result.getCredit();

                        idField.setText(String.valueOf(credit.getId()));
                        purposeField.setText(credit.getPurpose());
                        maxAmountField.setValue(credit.getMaxAmount());
                        percentField.setValue(credit.getPercent());
                        maxTermField.setValue(credit.getMaxTerm());
                        deleteButton.setEnabled(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        creditsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        purposeField = new javax.swing.JTextArea();
        maxAmountField = new javax.swing.JSpinner();
        percentField = new javax.swing.JSpinner();
        maxTermField = new javax.swing.JSpinner();

        creditsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Идентификатор", "Цель выдачи", "Максимальная сумма", "Процент", "Максимальный срок (месяцы)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(creditsTable);

        jLabel1.setText("Идентификатор:");

        idField.setEnabled(false);

        jLabel2.setText("Цель выдачи:");

        jLabel4.setText("Максимальная сумма:");

        jLabel5.setText("Процент:");

        jLabel6.setText("Максимальный срок (месяцев):");

        saveButton.setText("Сохранить");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Очистить");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Удалить");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        purposeField.setColumns(20);
        purposeField.setRows(5);
        jScrollPane2.setViewportView(purposeField);

        maxAmountField.setModel(new javax.swing.SpinnerNumberModel(1.0d, 1.0d, 1000000.0d, 0.01d));

        percentField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 300, 1));

        maxTermField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 240, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(maxAmountField, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(51, 51, 51)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(idField)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(percentField)
                                    .addComponent(maxTermField))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(percentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel6)
                        .addComponent(maxTermField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(saveButton)
                    .addComponent(clearButton)
                    .addComponent(deleteButton)
                    .addComponent(maxAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Integer creditId = Integer.valueOf(idField.getText());

        try {
            Socket socket = ConnectionUtil.getSocket();

            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new DeleteCreditCommand(creditId));

            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            UpdateCreditStatusResult result = (UpdateCreditStatusResult) inputStream.readObject();

            if (result.isSuccess()) {

                clearCreditFields();
                reloadCreditsTableData();
                JOptionPane.showMessageDialog(this, "РљСЂРµРґРёС‚ СѓСЃРїРµС€РЅРѕ СѓРґР°Р»РµРЅ.");
            } else {
                JOptionPane.showMessageDialog(this, "РќРµ СѓРґР°Р»РѕСЃСЊ СѓРґР°Р»РёС‚СЊ РєСЂРµРґРёС‚");
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearCreditFields();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            Socket socket = ConnectionUtil.getSocket();

            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            Integer id = "".equals(idField.getText()) ? null : Integer.valueOf(idField.getText());

            outputStream.writeObject(new SaveCreditCommand(new Credit(id, purposeField.getText(), (Double) maxAmountField.getValue(),
                (Integer) percentField.getValue(), (Integer) maxTermField.getValue())));

            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            UpdateCreditStatusResult result = (UpdateCreditStatusResult) inputStream.readObject();

            if (result.isSuccess()) {

                clearCreditFields();
                reloadCreditsTableData();
                JOptionPane.showMessageDialog(this, "РљСЂРµРґРёС‚ СѓСЃРїРµС€РЅРѕ СЃРѕС…СЂР°РЅРµРЅ.");
            } else {
                JOptionPane.showMessageDialog(this, "РќРµ СѓРґР°Р»РѕСЃСЊ СЃРѕС…СЂР°РЅРёС‚СЊ РєСЂРµРґРёС‚");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clearCreditFields() {
        idField.setText("");
        purposeField.setText("");
        maxAmountField.setValue(1.0);
        percentField.setValue(1);
        maxTermField.setValue(1);

        try {
            creditsTable.clearSelection();
        } catch (Exception e) {
            
        }
        deleteButton.setEnabled(false);
    }
    
    private void reloadCreditsTableData() {
        try {
            Socket socket = ConnectionUtil.getSocket();
            
            ObjectOutputStream outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject(new ListCreditsCommand());
            
            ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());
            CreditsResult result = (CreditsResult) inputStream.readObject();
            
            int rowsCount = ((DefaultTableModel) creditsTable.getModel()).getRowCount();
            
            for (int i = 0; i < rowsCount; i ++) {
                ((DefaultTableModel) creditsTable.getModel()).removeRow(0);
            }
            
            for (int i = 0; i < result.getCredits().size(); i ++) {
                Credit credit = result.getCredits().get(i);
                Object[] row = new Object[6];
                
                row[0] = credit.getId();
                row[1] = credit.getPurpose();
                row[2] = credit.getMaxAmount();
                row[3] = credit.getPercent();
                row[4] = credit.getMaxTerm();
                
                ((DefaultTableModel) creditsTable.getModel()).addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTable creditsTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner maxAmountField;
    private javax.swing.JSpinner maxTermField;
    private javax.swing.JSpinner percentField;
    private javax.swing.JTextArea purposeField;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
